scalar Path
scalar Node
scalar Relationship

type Context {
  todoId: ID!
  name: String!
  todo: [Todo] @relationship(type: "Contains", direction: OUT)
}

type Todo {
  todoId: ID!
  name: String!
  project: [Project] @relationship(type: "DEPENDS_ON", direction: IN)
  label: [String]
  identity: Int
  description: String
}

type Properties {
  name: String
  id: String
}

type Graph {
  nodes: [Node]
  relationships: [Relationship]
}

type Project {
  projectId: ID!
  name: String!
  depends_on: [Todo] @relationship(type: "DEPENDS_ON", direction: OUT)

  subgraph: Graph
    @cypher(statement: """
    MATCH p=(this) -[:DEPENDS_ON *]-> (m:Todo)
    WITH apoc.agg.graph(p) AS g
    RETURN g
    """)

  nextActions: [Todo]
    @cypher(statement: """
    MATCH (this) -[:DEPENDS_ON *]-> (m)
    where not (m) -[:DEPENDS_ON *]-> ()
    return distinct(m)
    """)

  numTodos: Int
    @cypher(statement: """
    MATCH (this) -[:DEPENDS_ON *]-> (m:Todo)
    return count(distinct(m))
    """)
}

type User {
  userId: ID!
  name: String
}

type Business {
  businessId: ID!
  name: String!
  address: String
  city: String
  state: String
  location: Point
  avgStars: Float
    @cypher(
      statement: "MATCH (this)<-[:REVIEWS]-(r:Review) RETURN coalesce(avg(r.stars),0.0)"
    )
  reviews: [Review] @relationship(type: "REVIEWS", direction: IN)
  categories: [Category] @relationship(type: "IN_CATEGORY", direction: OUT)
}

type Review {
  reviewId: ID!
  stars: Float
  text: String
  date: DateTime
  business: Business @relationship(type: "REVIEWS", direction: OUT)
  user: User @relationship(type: "WROTE", direction: IN)
}

type Category {
  name: ID!
  businesses: [Business] @relationship(type: "IN_CATEGORY", direction: IN)
}

type RatingCount @exclude {
  stars: Float!
  count: Int!
}

type Query {
  todoCount: Int! @cypher(statement: "MATCH (n:Todo) RETURN COUNT(n)")
  projectCount: Int! @cypher(statement: "MATCH (n:Project) RETURN COUNT(n)")
  ratingsCount: [RatingCount]
    @cypher(
      statement: "MATCH (r:Review) WITH r.stars AS stars, COUNT(*) AS count ORDER BY stars RETURN {stars: stars, count: count}"
    )
  nodes: [Todo]
    @cypher(statement: "MATCH p=(n:Todo) -[:DEPENDS_ON *]-> (m:Todo) WITH apoc.agg.graph(p) AS g RETURN g.nodes")
}

type Mutation {
  mergeUser(name: String!, userId: ID!): User
    @cypher(statement: """
      MERGE (u:User {userId: $userId})
      ON CREATE SET u.name = $name
      RETURN u
      """
    )
  mergeProject(name: String!, projectId: ID!): Project
    @cypher(statement: """
      MERGE (p:Project {projectId: $projectId})
      ON CREATE SET p.name = $name
      RETURN p
      """
    )
  mergeTodo(name: String!, todoId: ID!, description: String): Todo
    @cypher(statement: """
      MERGE (t:Todo {todoId: $todoId})
      ON CREATE SET t.name = $name, t.description = $description
      RETURN t
      """
  )
  mergeProjectDependency(projectId: ID!, todoId: ID!): Project
  @cypher(statement: """
    MATCH (p:Project {projectId: $projectId})
    MATCH (t:Todo {todoId: $todoId})
    MERGE (p) -[:DEPENDS_ON]-> (t)
    RETURN p
    """
  )
  mergeTodoDependency(todoId1: ID!, todoId2: ID!): Todo
  @cypher(statement: """
    MATCH (t1:Todo {todoId: $todoId1})
    MATCH (t2:Todo {todoId: $todoId2})
    MERGE (t1) -[:DEPENDS_ON]-> (t2)
    RETURN t1
    """
  )
}
